<#
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================
#>
#nullable enable

<#@ template language="C#" #>
using System;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views.Core;
using FlexiMvvm.Views.Keyboard;
using Foundation;
using UIKit;
<# foreach (var viewGenerationOptions in ViewsGenerationOptions) { #>

namespace <#= GetNamespace(viewGenerationOptions) #>
{
    /// <summary>
    /// Represents a/an <see cref="<#= viewGenerationOptions.BaseClassName #>"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class <#= viewGenerationOptions.ClassName #> : <#= viewGenerationOptions.BaseClassName #>, IIosView
    {
        private IViewLifecycleDelegate? _lifecycleDelegate;
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>()
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected <#= viewGenerationOptions.ClassName #>(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <inheritdoc />
        protected internal <#= viewGenerationOptions.ClassName #>(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate.ForceInstanceCreation();
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ??= CreateLifecycleDelegate();

<#      if (viewGenerationOptions.HandleKeyboard) { #>
        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler ??= Keyboard.KeyboardHandler.Create(View);
<#      } else { #>
        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;
<#      } #>

        /// <summary>
        /// Creates a new <see cref="IViewLifecycleDelegate"/> instance. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<<#= viewGenerationOptions.ClassName #>>(this);
        }

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="<#= viewGenerationOptions.BaseClassName #>"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class <#= viewGenerationOptions.ClassName #><TViewModel> : <#= viewGenerationOptions.ClassName #>, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>()
        {
        }

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected <#= viewGenerationOptions.ClassName #>(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal <#= viewGenerationOptions.ClassName #>(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<<#= viewGenerationOptions.ClassName #><TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents a/an <see cref="<#= viewGenerationOptions.BaseClassName #>"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class <#= viewGenerationOptions.ClassName #><TViewModel, TParameters> : <#= viewGenerationOptions.ClassName #>, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>()
        {
        }

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public <#= viewGenerationOptions.ClassName #>(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected <#= viewGenerationOptions.ClassName #>(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal <#= viewGenerationOptions.ClassName #>(IntPtr handle)
            : base(handle)
        {
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<<#= viewGenerationOptions.ClassName #><TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}
<# } #>
