<#
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================
#>
<#@ template language="C#" #>
using System;
using System.Threading.Tasks;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views.Core;
using FlexiMvvm.Views.Keyboard;
<# foreach (var viewGenerationOptions in ViewsGenerationOptions) { #>

namespace <#= GetNamespace(viewGenerationOptions) #>
{
    public partial class <#= viewGenerationOptions.ClassName #> : <#= viewGenerationOptions.BaseClassName #>, IIosView, IKeyboardHandlerOwner
    {
        private IViewLifecycleDelegate _lifecycleDelegate;
        private KeyboardHandler _keyboardHandler;

        protected IViewLifecycleDelegate LifecycleDelegate => _lifecycleDelegate ?? (_lifecycleDelegate = CreateLifecycleDelegate());

        public virtual bool HandleKeyboard { get; } = <#= viewGenerationOptions.HandleKeyboard.ToString().ToLower() #>;

        public KeyboardHandler KeyboardHandler => _keyboardHandler;

        protected virtual IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<<#= viewGenerationOptions.ClassName #>>(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        void IKeyboardHandlerOwner.SetKeyboardHandler(KeyboardHandler handler)
        {
            _keyboardHandler = handler;
        }
    }

    public partial class <#= viewGenerationOptions.ClassName #><TViewModel> : <#= viewGenerationOptions.ClassName #>, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<<#= viewGenerationOptions.ClassName #><TViewModel>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            await ViewModel.InitializeAsync();
        }
    }

    public partial class <#= viewGenerationOptions.ClassName #><TViewModel, TParameters> : <#= viewGenerationOptions.ClassName #>, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private readonly TParameters _parameters;

        public <#= viewGenerationOptions.ClassName #>(TParameters parameters)
        {
            _parameters = parameters;
        }

        public event EventHandler<ResultSetEventArgs> ResultSet;

        public TViewModel ViewModel { get; private set; }

        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new ViewLifecycleDelegate<<#= viewGenerationOptions.ClassName #><TViewModel, TParameters>, TViewModel>(this);
        }

        public void SetResult(ResultCode resultCode)
        {
            LifecycleDelegate.SetResult(resultCode);
        }

        public void SetResult(ResultCode resultCode, Result result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync()
        {
            await ViewModel.InitializeAsync(_parameters);
        }
    }
}
<# } #>
