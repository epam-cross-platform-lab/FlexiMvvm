// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using System;
using System.Diagnostics;
using Android.App;
using Android.Content;
using Android.OS;
using FlexiMvvm.Diagnostics;
using FlexiMvvm.Navigation;
using FlexiMvvm.ViewModels;
using JetBrains.Annotations;

namespace FlexiMvvm.Views.Core
{
    public class ViewDelegate<TView> : IViewDelegate<TView>
        where TView : class, IAndroidView
    {
        public ViewDelegate([NotNull] TView view)
        {
            View = view ?? throw new ArgumentNullException(nameof(view));
        }

        public TView View { get; }

        public virtual void OnCreate([CanBeNull] Bundle savedInstanceState)
        {
        }

        public virtual void OnActivityCreated()
        {
        }

        public virtual void OnStart()
        {
        }

        public virtual void OnResume()
        {
        }

        public virtual void OnPause()
        {
        }

        public virtual void OnStop()
        {
        }

        public virtual void OnActivityResult(int requestCode, Result resultCode, [CanBeNull] Intent data)
        {
        }

        public virtual void OnSaveInstanceState([NotNull] Bundle outState)
        {
        }

        public virtual void OnDestroyView()
        {
        }

        public virtual void OnDestroy()
        {
        }
    }

    public class ViewDelegate<TView, TViewModel> : ViewDelegate<TView>, IViewDelegate<TView, TViewModel>
        where TView : class, IAndroidView<TViewModel>
        where TViewModel : class, IViewModelWithState
    {
        private const string ViewModelKeyKey = "FlexiMvvm_ViewModelKey";

        [CanBeNull]
        private string _viewModelKey;
        [CanBeNull]
        private ILogger _logger;

        public ViewDelegate([NotNull] TView view)
            : base(view)
        {
        }

        public TViewModel ViewModel { get; private set; }

        [NotNull]
        private ILogger Logger => _logger ?? (_logger = new ConsoleLogger("FlexiMvvm.Lifecycle", LogFormatter.FormatTypeName(View)));

        public override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);

            _viewModelKey = savedInstanceState?.GetString(ViewModelKeyKey) ?? Guid.NewGuid().ToString();

            SetupViewModel(_viewModelKey, savedInstanceState);
        }

        public override void OnActivityCreated()
        {
            base.OnActivityCreated();

            var parentView = View.FindParentViewWithModel();

            if (parentView != null)
            {
                // View.ViewModel.DirectParentViewModelAttached(parentView.ViewModel);
                // parentView.ViewModel.DirectChildViewModelAttached(View.ViewModel);
            }
        }

        public override async void OnActivityResult(int requestCode, Result resultCode, Intent data)
        {
            base.OnActivityResult(requestCode, resultCode, data);

            if (ViewModel is IViewModelWithResultHandler viewModelWithResultHandler)
            {
                var handleViewModelResultProxy = RequestCode.GetHandleViewModelResultProxy(View.GetType(), requestCode);

                if (handleViewModelResultProxy != null)
                {
                    if (ViewModel.Initialization != null)
                    {
                        await ViewModel.Initialization;
                    }

                    handleViewModelResultProxy.HandleViewModelResult(viewModelWithResultHandler, resultCode, data);
                }
                else
                {
                    Log($"\"{LogFormatter.FormatTypeName(View)}\" can't handle activity result for \"{requestCode}\" request code. " +
                        $"Please check that the request code is generated by " +
                        $"\"{LogFormatter.FormatTypeName<RequestCode>()}.{nameof(RequestCode.Get)}\" " +
                        $"method and you call \"{nameof(Activity.StartActivityForResult)}\" method for appropriate activity/fragment.");
                }
            }
            else
            {
                Log($"\"{LogFormatter.FormatTypeName(ViewModel)}\" view model doesn't implement " +
                    $"\"{LogFormatter.FormatTypeName<IViewModelWithResultHandler>()}\" interface. Therefore it can't handle passed result.");
            }
        }

        public override void OnSaveInstanceState(Bundle outState)
        {
            base.OnSaveInstanceState(outState);

            outState.PutString(ViewModelKeyKey, _viewModelKey);
            outState.PutViewModelStateBundle(ViewModel.ExportStateBundle());
        }

        private void SetupViewModel([NotNull] string key, [CanBeNull] Bundle savedInstanceState)
        {
            var stateBundle = savedInstanceState.GetViewModelStateBundle();
            ViewModel = ViewModelProvider.Get<TViewModel>(View, key, stateBundle);

            if (ViewModel.Initialization == null)
            {
                ViewModelViewCache.Add(ViewModel, View);
                View.InitializeViewModel();
            }
        }

        [Conditional("DEBUG")]
        private void Log([CanBeNull] string message)
        {
            Logger.Log(message);
        }
    }
}
