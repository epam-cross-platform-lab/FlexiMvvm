// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views.Core;
using FlexiMvvm.Views.Keyboard;
using Foundation;
using UIKit;

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UICollectionViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class CollectionViewController : UIKit.UICollectionViewController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public CollectionViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController>(this);
        }

        /// <inheritdoc />
        public CollectionViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController>(this);
        }

        /// <inheritdoc />
        public CollectionViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController>(this);
        }

        /// <inheritdoc />
        protected CollectionViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController>(this);
        }

        /// <inheritdoc />
        protected internal CollectionViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UICollectionViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class CollectionViewController<TViewModel> : CollectionViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public CollectionViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public CollectionViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public CollectionViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected CollectionViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal CollectionViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UICollectionViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class CollectionViewController<TViewModel, TParameters> : CollectionViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public CollectionViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public CollectionViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public CollectionViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected CollectionViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal CollectionViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<CollectionViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UINavigationController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class NavigationController : UIKit.UINavigationController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public NavigationController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController>(this);
        }

        /// <inheritdoc />
        public NavigationController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController>(this);
        }

        /// <inheritdoc />
        public NavigationController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController>(this);
        }

        /// <inheritdoc />
        protected NavigationController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController>(this);
        }

        /// <inheritdoc />
        protected internal NavigationController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UINavigationController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class NavigationController<TViewModel> : NavigationController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public NavigationController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public NavigationController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public NavigationController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected NavigationController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal NavigationController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UINavigationController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class NavigationController<TViewModel, TParameters> : NavigationController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public NavigationController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public NavigationController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public NavigationController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected NavigationController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal NavigationController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<NavigationController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UIPageViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class PageViewController : UIKit.UIPageViewController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public PageViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController>(this);
        }

        /// <inheritdoc />
        public PageViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController>(this);
        }

        /// <inheritdoc />
        public PageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController>(this);
        }

        /// <inheritdoc />
        protected PageViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController>(this);
        }

        /// <inheritdoc />
        protected internal PageViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UIPageViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class PageViewController<TViewModel> : PageViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public PageViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public PageViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public PageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected PageViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal PageViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UIPageViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class PageViewController<TViewModel, TParameters> : PageViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public PageViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public PageViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public PageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected PageViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal PageViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<PageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UISplitViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class SplitViewController : UIKit.UISplitViewController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public SplitViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController>(this);
        }

        /// <inheritdoc />
        public SplitViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController>(this);
        }

        /// <inheritdoc />
        public SplitViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController>(this);
        }

        /// <inheritdoc />
        protected SplitViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController>(this);
        }

        /// <inheritdoc />
        protected internal SplitViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UISplitViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class SplitViewController<TViewModel> : SplitViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public SplitViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public SplitViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public SplitViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected SplitViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal SplitViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UISplitViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class SplitViewController<TViewModel, TParameters> : SplitViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public SplitViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public SplitViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public SplitViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected SplitViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal SplitViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<SplitViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UITabBarController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class TabBarController : UIKit.UITabBarController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public TabBarController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController>(this);
        }

        /// <inheritdoc />
        public TabBarController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController>(this);
        }

        /// <inheritdoc />
        public TabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController>(this);
        }

        /// <inheritdoc />
        protected TabBarController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController>(this);
        }

        /// <inheritdoc />
        protected internal TabBarController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UITabBarController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class TabBarController<TViewModel> : TabBarController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public TabBarController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TabBarController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected TabBarController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal TabBarController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UITabBarController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class TabBarController<TViewModel, TParameters> : TabBarController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public TabBarController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TabBarController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected TabBarController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal TabBarController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UITableViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class TableViewController : UIKit.UITableViewController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public TableViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController>(this);
        }

        /// <inheritdoc />
        public TableViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController>(this);
        }

        /// <inheritdoc />
        public TableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController>(this);
        }

        /// <inheritdoc />
        protected TableViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController>(this);
        }

        /// <inheritdoc />
        protected internal TableViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler;

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UITableViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class TableViewController<TViewModel> : TableViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public TableViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TableViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected TableViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal TableViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UITableViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class TableViewController<TViewModel, TParameters> : TableViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public TableViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TableViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public TableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected TableViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal TableViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<TableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

namespace FlexiMvvm.Views
{
    /// <summary>
    /// Represents the <see cref="UIKit.UIViewController"/> that is adapted for use with the FlexiMvvm.
    /// </summary>
    public partial class ViewController : UIKit.UIViewController, IIosView
    {
        private KeyboardHandler? _keyboardHandler;

        /// <inheritdoc />
        public ViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController>(this);
        }

        /// <inheritdoc />
        public ViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController>(this);
        }

        /// <inheritdoc />
        public ViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController>(this);
        }

        /// <inheritdoc />
        protected ViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController>(this);
        }

        /// <inheritdoc />
        protected internal ViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController>(this);
        }

        /// <summary>
        /// Gets the view lifecycle delegate. Intended for internal use by the FlexiMvvm.
        /// </summary>
        protected virtual IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public virtual IKeyboardHandler? KeyboardHandler => _keyboardHandler ??= Keyboard.KeyboardHandler.Create(View);

        /// <inheritdoc />
        public override void WillMoveToParentViewController(UIViewController? parent)
        {
            base.WillMoveToParentViewController(parent);

            LifecycleDelegate.WillMoveToParentViewController(parent);
        }

        /// <inheritdoc />
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            LifecycleDelegate.ViewDidLoad();
        }

        /// <inheritdoc />
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            LifecycleDelegate.ViewWillAppear();
        }

        /// <inheritdoc />
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            LifecycleDelegate.ViewDidAppear();
        }

        /// <inheritdoc />
        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);

            LifecycleDelegate.ViewWillDisappear();
        }

        /// <inheritdoc />
        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);

            LifecycleDelegate.ViewDidDisappear();
        }

        /// <inheritdoc />
        public override void DidMoveToParentViewController(UIViewController? parent)
        {
            base.DidMoveToParentViewController(parent);

            LifecycleDelegate.DidMoveToParentViewController(parent);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UIViewController"/> that is adapted for use with the FlexiMvvm
    /// and has its own lifecycle-aware view model.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class ViewController<TViewModel> : ViewController, INavigationView<TViewModel>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public ViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public ViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public ViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected ViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal ViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(recreated);
        }
    }

    /// <summary>
    /// Represents the <see cref="UIKit.UIViewController"/> that is adapted for use with the FlexiMvvm,
    /// has its own lifecycle-aware view model and takes lifecycle-aware view model parameters.
    /// </summary>
    /// <typeparam name="TViewModel">The type of the view model.</typeparam>
    /// <typeparam name="TParameters">The type of the view model parameters.</typeparam>
    [SuppressMessage(
        "Compiler",
        "CS8618:Non-nullable field is uninitialized.",
        Justification = "The view lifecycle delegate sets a value to the ViewModel property so it is never null.")]
    public partial class ViewController<TViewModel, TParameters> : ViewController, INavigationView<TViewModel, TParameters>, ILifecycleViewModelOwner<TViewModel>
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        private TParameters? _parameters;

        /// <inheritdoc />
        public ViewController()
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public ViewController(NSCoder coder)
            : base(coder)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public ViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected ViewController(NSObjectFlag t)
            : base(t)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        protected internal ViewController(IntPtr handle)
            : base(handle)
        {
            LifecycleDelegate = new ViewLifecycleDelegate<ViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        /// <inheritdoc />
        public event EventHandler<ResultSetEventArgs> ResultSet;

        /// <inheritdoc />
        protected override IViewLifecycleDelegate LifecycleDelegate { get; }

        /// <inheritdoc />
        public TViewModel ViewModel { get; private set; }

        /// <inheritdoc />
        public void SetParameters(TParameters? parameters)
        {
            _parameters = parameters;
        }

        /// <inheritdoc />
        public void SetResult(ResultCode resultCode, Result? result)
        {
            LifecycleDelegate.SetResult(resultCode, result);
        }

        /// <inheritdoc />
        public void RaiseResultSet(ResultCode resultCode, Result? result)
        {
            ResultSet?.Invoke(this, new ResultSetEventArgs(resultCode, result));
        }

        /// <inheritdoc />
        public void HandleResult(object sender, ResultSetEventArgs args)
        {
            if (sender == null)
                throw new ArgumentNullException(nameof(sender));
            if (args == null)
                throw new ArgumentNullException(nameof(args));

            LifecycleDelegate.HandleResult(sender, args);
        }

        /// <inheritdoc />
        void ILifecycleViewModelOwner<TViewModel>.SetViewModel(TViewModel viewModel)
        {
            ViewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
        }

        /// <inheritdoc />
        async Task ILifecycleViewModelOwner<TViewModel>.InitializeViewModelAsync(bool recreated)
        {
            await ViewModel.InitializeAsync(_parameters, recreated);
        }
    }
}

