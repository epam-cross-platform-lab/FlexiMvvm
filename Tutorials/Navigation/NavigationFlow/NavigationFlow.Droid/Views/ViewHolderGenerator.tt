<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#
// *********************** View Holders Generation Configuration **********************************
    LayoutDefinitionOptions.Namespace = "NavigationFlow.Droid.Views";
    LayoutDefinitionOptions.ViewTypeNameCustomFormat = new Dictionary<string, string>
    {
		{ "bfla.droid.views.shared.SquareRelativeLayout", "BFLA.Droid.Views.Shared.SquareRelativeLayout" },
        { "ffimageloading.cross.MvxCachedImageView", "FFImageLoading.Cross.MvxCachedImageView" },
        { "com.facebook.share.widget.ShareButton", "Xamarin.Facebook.Share.Widget.ShareButton" },
        { "com.google.android.gms.maps.MapView", "Android.Gms.Maps.MapView"},
        { "com.github.chrisbanes.photoview.PhotoView", "ImageViews.Photo.PhotoView"}
    };
    LayoutDefinitionOptions.LayoutTypeNamePostfix = "ViewHolder";
    LayoutDefinitionOptions.GenerateAnnotations = false;
    var layoutDefinitionsOptions = new List<LayoutDefinitionOptions>
    {
        new LayoutDefinitionOptions("activity_.+", true, "Activity", "activity", false),
        new LayoutDefinitionOptions("fragment_.+", true, "View", "rootView", true),
        new LayoutDefinitionOptions("layout_.+", true, "View", "rootView", true),
        new LayoutDefinitionOptions("cell_.+", false, "View", "ItemView", true)
    };
    var projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
    var layoutClassDefinitionTemplates = LayoutFiles.Parse(projectPath, layoutDefinitionsOptions);
// *********************** View Holders Generation Configuration **********************************
#>
// <auto-generated />
// ReSharper disable All
using System;
using Android.App;
using Android.Support.V7.Widget;
using Android.Views;
using Android.Widget;
<# if (LayoutDefinitionOptions.GenerateAnnotations) { #>
using JetBrains.Annotations;
<# } #>

namespace <#= LayoutDefinitionOptions.Namespace #>
{
<# foreach (var layoutClassDefinitionTemplate in layoutClassDefinitionTemplates) { #>
<#= layoutClassDefinitionTemplate.GetClassDefinitionTemplate() #>

<# } #>
}
// ReSharper restore All
<#+
    public class LayoutFiles
    {
        public static IReadOnlyCollection<LayoutClassDefinitionTemplate> Parse(string projectPath, IReadOnlyList<LayoutDefinitionOptions> layoutDefinitionsOptions)
        {
            var classDefinitions = new List<LayoutClassDefinitionTemplate>();
            var layoutFolderPaths = Directory.GetDirectories(Path.Combine(projectPath, "Resources"), "layout*");
            var layoutFilePaths = new List<string>();

            foreach (var layoutFolderPath in layoutFolderPaths)
            {
                layoutFilePaths.AddRange(Directory.GetFiles(layoutFolderPath, "*.*xml"));
            }

            var layoutFileNames = layoutFilePaths.Select(Path.GetFileNameWithoutExtension).Distinct();

            foreach (var layoutFileName in layoutFileNames)
            {
                classDefinitions.Add(LayoutFileParser.ParseLayout(
                    layoutFileName,
                    layoutFilePaths.Where(layoutFilePath => Path.GetFileNameWithoutExtension(layoutFilePath) == layoutFileName).ToList(),
                    layoutDefinitionsOptions));
            }

            return classDefinitions;
        }
    }

    public static class LayoutFileParser
    {
        public static LayoutClassDefinitionTemplate ParseLayout(
            string layoutFileName,
            IReadOnlyList<string> layoutFilePaths,
            IReadOnlyList<LayoutDefinitionOptions> layoutDefinitionsOptions)
        {
            var layoutDefinitionOptions = GetLayoutDefinitionOptions(layoutFileName, layoutDefinitionsOptions);
            var classDefinition = new LayoutClassDefinitionTemplate(layoutFileName, layoutDefinitionOptions);
            var layoutViewCount = new Dictionary<string, int>();

            foreach (var layoutFilePath in layoutFilePaths)
            {
                var document = XDocument.Load(layoutFilePath);
                var views = document.Descendants();
                var isRootView = true;

                foreach (var view in views)
                {
                    LayoutViewDefinitionTemplate viewDefinition = null;
                    var viewTypeName = view.Name.LocalName;

                    if (viewTypeName.Equals("include", StringComparison.OrdinalIgnoreCase))
                    {
                        var layoutFolderPath = Path.GetDirectoryName(layoutFilePath);
                        viewDefinition = ParseIncludeView(layoutFolderPath, view, isRootView, layoutDefinitionOptions);
                    }
                    else if (!viewTypeName.Equals("fragment", StringComparison.OrdinalIgnoreCase))
                    {
                        viewDefinition = ParseOrdinaryView(view, isRootView, layoutDefinitionOptions);
                    }

                    if (viewDefinition != null)
                    {
                        layoutViewCount[viewDefinition.ViewName] = layoutViewCount.ContainsKey(viewDefinition.ViewName) ? layoutViewCount[viewDefinition.ViewName] + 1 : 1;

                        if (classDefinition.ViewDefinitions.All(definition => !definition.ViewName.Equals(viewDefinition.ViewName, StringComparison.OrdinalIgnoreCase)))
                        {
                            classDefinition.ViewDefinitions.Add(viewDefinition);
                        }
                    }

                    isRootView = false;
                }
            }

            foreach (var viewDefinition in classDefinition.ViewDefinitions)
            {
                viewDefinition.CanBeNull = layoutViewCount[viewDefinition.ViewName] != layoutFilePaths.Count;
            }

            return classDefinition;
        }

        private static LayoutViewDefinitionTemplate ParseOrdinaryView(XElement view, bool isRootView, LayoutDefinitionOptions layoutDefinitionOptions)
        {
            LayoutViewDefinitionTemplate viewDefinition = null;
            var viewTypeName = view.Name.LocalName;
            var viewName = GetAttributeValue(view, "android:id", "@+id/");

            if (!string.IsNullOrWhiteSpace(viewName))
            {
                viewDefinition = new LayoutViewDefinitionTemplate(viewTypeName, viewName, isRootView, layoutDefinitionOptions);
            }

            return viewDefinition;
        }

        private static LayoutViewDefinitionTemplate ParseIncludeView(string layoutFolderPath, XElement includeView, bool isRootView, LayoutDefinitionOptions layoutDefinitionOptions)
        {
            LayoutViewDefinitionTemplate viewDefinition = null;
            var layoutFileName = GetAttributeValue(includeView, "layout", "@layout/");

            if (!string.IsNullOrWhiteSpace(layoutFileName))
            {
                var layoutFilePath = Directory.GetFiles(layoutFolderPath, $"{layoutFileName}.*xml").FirstOrDefault();

                if (string.IsNullOrWhiteSpace(layoutFilePath))
                {
                    layoutFilePath = Directory.GetFiles(Path.Combine(layoutFolderPath, "..\\layout\\"), $"{layoutFileName}.*xml").FirstOrDefault();
                }

                if (!string.IsNullOrWhiteSpace(layoutFilePath))
                {
                    var document = XDocument.Load(layoutFilePath);
                    var includeRootView = document.Root;

                    if (includeRootView != null)
                    {
                        var viewTypeName = includeRootView.Name.LocalName;
                        var viewName = GetAttributeValue(includeView, "android:id", "@+id/") ?? GetAttributeValue(includeRootView, "android:id", "@+id/");

                        if (!string.IsNullOrWhiteSpace(viewName))
                        {
                            viewDefinition = new IncludeLayoutViewDefinitionTemplate(layoutFileName, viewTypeName, viewName, isRootView, layoutDefinitionOptions);
                        }
                    }
                }
            }

            return viewDefinition;
        }

        private static LayoutDefinitionOptions GetLayoutDefinitionOptions(string layoutName, IReadOnlyList<LayoutDefinitionOptions> layoutDefinitionsOptions)
        {
            return layoutDefinitionsOptions.FirstOrDefault(layoutDefinitionOption => Regex.IsMatch(layoutName, layoutDefinitionOption.LayoutFileNameRegex));
        }

        private static string GetAttributeValue(XElement element, string attributeName, string valuePrefix = null)
        {
            var attributeNameParts = attributeName.Split(':');
            XAttribute attribute;
            var attributeValue = string.Empty;

            if (attributeNameParts.Length == 2)
            {
                var attributeNamespace = element.GetNamespaceOfPrefix(attributeNameParts[0]);

                if (attributeNamespace == null)
                {
                    throw new InvalidOperationException($"Can't get namespace for \"{attributeName}\" attribute of \"{element}\" element.");
                }

                var attributeNameWithNamespace = attributeNamespace.GetName(attributeNameParts[1]);
                attribute = element.Attribute(attributeNameWithNamespace);
            }
            else
            {
                attribute = element.Attribute(attributeNameParts[0]);
            }

            if (attribute != null)
            {
                attributeValue = attribute.Value;

                if (!string.IsNullOrWhiteSpace(valuePrefix))
                {
                    attributeValue = attributeValue.Replace(valuePrefix, string.Empty);
                }
            }

            return attributeValue;
        }
    }

    /* Layout Definition */

    public class LayoutDefinitionOptions
    {
        public LayoutDefinitionOptions(string layoutFileNameRegex, bool generateConstructor, string hostViewTypeName, string hostViewName, bool hostViewIsRootView)
        {
            LayoutFileNameRegex = layoutFileNameRegex;
            GenerateConstructor = generateConstructor;
            HostViewTypeName = hostViewTypeName;
            HostViewName = hostViewName;
            HostViewIsRootView = hostViewIsRootView;
        }

        public static string Namespace { get; set; }

        public static IDictionary<string, string> ViewTypeNameCustomFormat { get; set; }

        public static string LayoutTypeNamePostfix { get; set; }

        public static bool GenerateAnnotations { get; set; }

        public string LayoutFileNameRegex { get; }

        public bool GenerateConstructor { get; }

        public string HostViewTypeName { get; }

        public string HostViewName { get; }

        public bool HostViewIsRootView { get; }

        public static Func<string, string> FormatLayoutTypeName { get; set; } = rawName =>
        {
            var formattedName = Regex.Replace(rawName, "^([a-zA-Z0-9]+)_([a-zA-Z0-9_]+)$", "$2_$1");
            formattedName = Regex.Replace(formattedName, "^\\w|_\\w", match => char.ToUpper(match.Value.Last()).ToString());

            return formattedName;
        };

        public static Func<string, string> FormatViewTypeName { get; set; } = rawName =>
        {
            string formattedName = null;
            string customFormat;

            if (ViewTypeNameCustomFormat != null && ViewTypeNameCustomFormat.TryGetValue(rawName, out customFormat))
            {
                formattedName = customFormat;
            }
            else
            {
                formattedName = Regex.Replace(rawName, "^\\w|\\.\\w", match => match.Value.ToUpper().ToString());
            }

            return formattedName;
        };

        public static Func<string, string> FormatViewVariableName { get; set; } = rawName =>
        {
            return Regex.Replace(rawName, "_\\w", match => char.ToUpper(match.Value.Last()).ToString());
        };

        public static Func<string, string> FormatViewPropertyName { get; set; } = rawName =>
        {
            return Regex.Replace(rawName, "^\\w|_\\w", match => char.ToUpper(match.Value.Last()).ToString());
        };
    }

    public abstract class DefinitionTemplate
    {
        protected DefinitionTemplate(LayoutDefinitionOptions layoutDefinitionOptions)
        {
            LayoutDefinitionOptions = layoutDefinitionOptions;
        }

        protected LayoutDefinitionOptions LayoutDefinitionOptions { get; }

        protected string FormatLayoutTypeName(string rawName)
        {
            return $"{LayoutDefinitionOptions.FormatLayoutTypeName(rawName)}{GetLayoutTypeNamePostfix()}" ;
        }

        protected string GetLayoutTypeNamePostfix()
        {
            return LayoutDefinitionOptions.LayoutTypeNamePostfix;
        }

        protected string FormatViewTypeName(string rawName)
        {
            return LayoutDefinitionOptions.FormatViewTypeName(rawName);
        }

        protected string FormatViewVariableName(string rawName)
        {
            return LayoutDefinitionOptions.FormatViewVariableName(rawName);
        }

        protected string FormatViewPropertyName(string rawName)
        {
            return LayoutDefinitionOptions.FormatViewPropertyName(rawName);
        }

        protected string GetAnnotation(string value)
        {
            return LayoutDefinitionOptions.GenerateAnnotations ? value : null;
        }
    }

    public class LayoutClassDefinitionTemplate : DefinitionTemplate
    {
        public LayoutClassDefinitionTemplate(string layoutTypeName, LayoutDefinitionOptions layoutDefinitionOptions) : base(layoutDefinitionOptions)
        {
            LayoutTypeName = layoutTypeName;
        }

        protected string LayoutTypeName { get; }

        public IList<LayoutViewDefinitionTemplate> ViewDefinitions { get; } = new List<LayoutViewDefinitionTemplate>();

        public virtual string GetClassDefinitionTemplate()
        {
            var templateBuilder = new TemplateBuilder();
            var indentCount = 0;

            if (LayoutDefinitionOptions == null)
            {
                templateBuilder.AppendLineWithIndent("/*", indentCount + 1);
                templateBuilder.AppendLineWithIndent($"\"LayoutDefinitionOptions\" are not specified for \"{LayoutTypeName}\" layout file therefore view holder can't be generated for it.", indentCount + 1);
            }
            else if (!ViewDefinitions.Any())
            {
                templateBuilder.AppendLineWithIndent("/*", indentCount + 1);
                templateBuilder.AppendLineWithIndent($"\"{LayoutTypeName}\" layout file doesn't contain any view with \"android:id\" attribute specified. There is no sense in view holder generation.", indentCount + 1);
            }

            templateBuilder.AppendLineWithIndent($"public partial class {FormatLayoutTypeName(LayoutTypeName)}", ++indentCount);
            templateBuilder.AppendLineWithIndent("{", indentCount++);

            if (LayoutDefinitionOptions != null && ViewDefinitions.Any())
            {
                templateBuilder.AppendLine(GetVariablesDefinitionTemplate(indentCount));
                templateBuilder.Append(GetConstructorDefinitionTemplate(indentCount));
                templateBuilder.AppendLine(GetPropertiesDefinitionTemplate(indentCount));
            }

            templateBuilder.AppendWithIndent("}", --indentCount);

            if (LayoutDefinitionOptions == null || !ViewDefinitions.Any())
            {
                templateBuilder.AppendLine(string.Empty);
                templateBuilder.AppendWithIndent("*/", indentCount);
            }

            return templateBuilder.ToString();
        }

        protected virtual string GetVariablesDefinitionTemplate(int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            if (LayoutDefinitionOptions.GenerateConstructor)
            {
                templateBuilder.AppendLineWithIndent($"{GetAnnotation("[NotNull]")} private readonly {LayoutDefinitionOptions.HostViewTypeName} {LayoutDefinitionOptions.HostViewName};", indentCount);
                templateBuilder.AppendLine(string.Empty);
            }

            foreach (var viewDefinitionTemplate in ViewDefinitions)
            {
                templateBuilder.AppendLine($"{viewDefinitionTemplate.GetVariableDefinitionTemplate(indentCount)}");
            }

            return templateBuilder.ToString();
        }

        protected virtual string GetConstructorDefinitionTemplate(int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            if (LayoutDefinitionOptions.GenerateConstructor)
            {
                templateBuilder.AppendLineWithIndent($"public {FormatLayoutTypeName(LayoutTypeName)}({GetAnnotation("[NotNull]")} {LayoutDefinitionOptions.HostViewTypeName} {LayoutDefinitionOptions.HostViewName})", indentCount);
                templateBuilder.AppendLineWithIndent("{", indentCount);
                templateBuilder.AppendLineWithIndent($"if ({LayoutDefinitionOptions.HostViewName} == null) throw new ArgumentNullException(nameof({LayoutDefinitionOptions.HostViewName}));", indentCount + 1);
                templateBuilder.AppendLine(string.Empty);
                templateBuilder.AppendLineWithIndent($"this.{LayoutDefinitionOptions.HostViewName} = {LayoutDefinitionOptions.HostViewName};", indentCount + 1);
                templateBuilder.AppendWithIndent("}", indentCount);
            }

            return templateBuilder.ToString();
        }

        protected virtual string GetPropertiesDefinitionTemplate(int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            foreach (var viewDefinitionTemplate in ViewDefinitions)
            {
                templateBuilder.AppendLine(string.Empty);
                templateBuilder.AppendLine(string.Empty);
                templateBuilder.Append($"{viewDefinitionTemplate.GetPropertyDefinitionTemplate(LayoutDefinitionOptions.HostViewName, indentCount)}");
            }

            return templateBuilder.ToString();
        }
    }

    public class LayoutViewDefinitionTemplate : DefinitionTemplate
    {
        public LayoutViewDefinitionTemplate(string viewTypeName, string viewName, bool isRootView, LayoutDefinitionOptions layoutDefinitionOptions)
            : base(layoutDefinitionOptions)
        {
            ViewTypeName = viewTypeName;
            ViewName = viewName;
            IsRootView = isRootView;
        }

        public string ViewTypeName { get; }

        public string ViewName { get; }

        public bool IsRootView { get; }

        public bool CanBeNull { get; set; } = true;

        public virtual string GetVariableDefinitionTemplate(int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            templateBuilder.AppendWithIndent($"{GetAnnotation("[CanBeNull]")} private {FormatViewTypeName(ViewTypeName)} {FormatViewVariableName(ViewName)};", indentCount);

            return templateBuilder.ToString();
        }

        public virtual string GetPropertyDefinitionTemplate(string viewHostName, int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            templateBuilder.AppendLineWithIndent($"{GetNullAnnotation()}", indentCount);
            templateBuilder.AppendLineWithIndent($"public {FormatViewTypeName(ViewTypeName)} {FormatViewPropertyName(ViewName)} =>", indentCount);

            templateBuilder.AppendWithIndent(IsRootView && LayoutDefinitionOptions.HostViewIsRootView
                ? $"{FormatViewVariableName(ViewName)} ?? ({FormatViewVariableName(ViewName)} = ({FormatViewTypeName(ViewTypeName)}){viewHostName});"
                : $"{FormatViewVariableName(ViewName)} ?? ({FormatViewVariableName(ViewName)} = {viewHostName}.FindViewById<{FormatViewTypeName(ViewTypeName)}>(Resource.Id.{ViewName}));",
                indentCount + 1);

            return templateBuilder.ToString();
        }

        protected string GetNullAnnotation()
        {
            return CanBeNull ? GetAnnotation("[CanBeNull]") : GetAnnotation("[NotNull]");
        }
    }

    public class IncludeLayoutViewDefinitionTemplate : LayoutViewDefinitionTemplate
    {
        public IncludeLayoutViewDefinitionTemplate(string layoutTypeName, string viewTypeName, string viewId, bool isRootView, LayoutDefinitionOptions layoutDefinitionOptions)
            : base(viewTypeName, viewId, isRootView, layoutDefinitionOptions)
        {
            LayoutTypeName = layoutTypeName;
        }

        protected string LayoutTypeName { get; }

        public override string GetVariableDefinitionTemplate(int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            templateBuilder.AppendWithIndent($"{GetAnnotation("[CanBeNull]")} private {FormatLayoutTypeName(LayoutTypeName)} {FormatViewVariableName(ViewName)}{GetLayoutTypeNamePostfix()};", indentCount);

            return templateBuilder.ToString();
        }

        public override string GetPropertyDefinitionTemplate(string viewHostName, int indentCount)
        {
            var templateBuilder = new TemplateBuilder();

            templateBuilder.AppendLineWithIndent($"{GetNullAnnotation()}", indentCount);
            templateBuilder.AppendLineWithIndent($"public {FormatLayoutTypeName(LayoutTypeName)} {FormatViewPropertyName(ViewName)}{GetLayoutTypeNamePostfix()} =>", indentCount);

            templateBuilder.AppendWithIndent(
                $"{FormatViewVariableName(ViewName)}{GetLayoutTypeNamePostfix()} ?? ({FormatViewVariableName(ViewName)}{GetLayoutTypeNamePostfix()} = new {FormatLayoutTypeName(LayoutTypeName)}({viewHostName}.FindViewById<{FormatViewTypeName(ViewTypeName)}>(Resource.Id.{ViewName})));",
                indentCount + 1);

            return templateBuilder.ToString();
        }
    }

    public class TemplateBuilder
    {
        private readonly StringBuilder stringBuilder = new StringBuilder();

        public void Append(string value)
        {
            stringBuilder.Append(value);
        }

        public void AppendWithIndent(string value, int indentCount)
        {
            AppendIndent(indentCount);
            stringBuilder.Append(value);
        }

        public void AppendLine(string value)
        {
            stringBuilder.AppendLine(value);
        }

        public void AppendLineWithIndent(string value, int indentCount)
        {
            AppendIndent(indentCount);
            stringBuilder.AppendLine(value);
        }

        private void AppendIndent(int indentCount)
        {
            stringBuilder.Append(' ', 4 * indentCount);
        }

        public override string ToString()
        {
            return stringBuilder.ToString();
        }
    }
#>
