// <auto-generated />
// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using System;
using FlexiMvvm.Bindings;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views.Core;
using Foundation;

namespace FlexiMvvm.Views
{
    public partial class BindablePageViewController<TViewModel> : FlexiMvvm.Views.PageViewController<TViewModel>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public BindablePageViewController()
        {
        }

        /// <inheritdoc />
        public BindablePageViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public BindablePageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected BindablePageViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal BindablePageViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<BindablePageViewController<TViewModel>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }

    public partial class BindablePageViewController<TViewModel, TParameters> : FlexiMvvm.Views.PageViewController<TViewModel, TParameters>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        /// <inheritdoc />
        public BindablePageViewController()
        {
        }

        /// <inheritdoc />
        public BindablePageViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public BindablePageViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected BindablePageViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal BindablePageViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<BindablePageViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class BindableTabBarController<TViewModel> : FlexiMvvm.Views.TabBarController<TViewModel>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public BindableTabBarController()
        {
        }

        /// <inheritdoc />
        public BindableTabBarController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public BindableTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected BindableTabBarController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal BindableTabBarController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<BindableTabBarController<TViewModel>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }

    public partial class BindableTabBarController<TViewModel, TParameters> : FlexiMvvm.Views.TabBarController<TViewModel, TParameters>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        /// <inheritdoc />
        public BindableTabBarController()
        {
        }

        /// <inheritdoc />
        public BindableTabBarController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public BindableTabBarController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected BindableTabBarController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal BindableTabBarController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<BindableTabBarController<TViewModel, TParameters>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }
}

namespace FlexiMvvm.Views
{
    public partial class BindableViewController<TViewModel> : FlexiMvvm.Views.ViewController<TViewModel>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithoutParameters
    {
        /// <inheritdoc />
        public BindableViewController()
        {
        }

        /// <inheritdoc />
        public BindableViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public BindableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected BindableViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal BindableViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<BindableViewController<TViewModel>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }

    public partial class BindableViewController<TViewModel, TParameters> : FlexiMvvm.Views.ViewController<TViewModel, TParameters>, IBindableView<TViewModel>, IBindingSetOwner
        where TViewModel : class, ILifecycleViewModelWithParameters<TParameters>
        where TParameters : Parameters
    {
        /// <inheritdoc />
        public BindableViewController()
        {
        }

        /// <inheritdoc />
        public BindableViewController(NSCoder coder)
            : base(coder)
        {
        }

        /// <inheritdoc />
        public BindableViewController(string nibName, NSBundle bundle)
            : base(nibName, bundle)
        {
        }

        /// <inheritdoc />
        protected BindableViewController(NSObjectFlag t)
            : base(t)
        {
        }

        /// <inheritdoc />
        protected internal BindableViewController(IntPtr handle)
            : base(handle)
        {
        }

        public IDisposable BindingSet { get; private set; }

        /// <inheritdoc />
        protected override IViewLifecycleDelegate CreateLifecycleDelegate()
        {
            return new BindableViewLifecycleDelegate<BindableViewController<TViewModel, TParameters>, TViewModel>(this);
        }

        public virtual void Bind(BindingSet<TViewModel> bindingSet)
        {
        }

        void IBindingSetOwner.SetBindingSet(IDisposable bindingSet)
        {
            BindingSet = bindingSet;
        }
    }
}

